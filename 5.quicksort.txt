#include <iostream>
#include <vector>
#include <cstdlib>
using namespace std;

int partition(vector<int> &arr, int low, int high)
{
    int pivot = arr[low];
    int i = low + 1;
    int j = high;

    while (i <= j)
    {
        while (i <= high && arr[i] <= pivot)  // Move `i` until an element > pivot is found
            i++;
        while (j >= low && arr[j] > pivot)   // Move `j` until an element <= pivot is found
            j--;

        if (i < j)
            swap(arr[i], arr[j]);
    }

    swap(arr[low], arr[j]);
    return j;
}

void QuickSort(vector<int> &arr, int low, int high)
{
    if (low < high)
    {
        int p = partition(arr, low, high);
        QuickSort(arr, low, p - 1);
        QuickSort(arr, p + 1, high);
    }
}

void QuickSortR(vector<int> &arr, int low, int high)
{
    if (low < high)
    {
        int random = low + rand() % (high - low + 1);  // Random pivot between low and high
        swap(arr[random], arr[low]);
        int p = partition(arr, low, high);
        QuickSortR(arr, low, p - 1);
        QuickSortR(arr, p + 1, high);
    }
}

int main()
{
    vector<int> x = {10, 12, 15, 20, 1, 4, 17, 16, 11};
    int low = 0;
    int high = x.size() - 1;

    QuickSort(x, low, high);
    for (auto i : x)
        cout << i << " ";
    cout << endl;

    x = {10, 12, 15, 20, 1, 4, 17, 16, 11};
    QuickSortR(x, low, high);
    for (auto i : x)
        cout << i << " ";
    cout << endl;

    return 0;
}
